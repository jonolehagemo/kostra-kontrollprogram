package no.ssb.kostra.test.control.sensitiv.meklinger_55;

import no.ssb.kostra.control.sensitiv.meklinger_55.*;
import org.junit.Ignore;
import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * Created by ojj on 20.06.2018.
 */
public class MeklingerControlsTest {



    private String ok_1 = "01             Østfold
    private String fail = "99             Østfold

    @Test
    public void controlFylkesnummerTest(){
        ControlFylkesnummer c = new ControlFylkesnummer();
        assertFalse(c.doControl(ok_1, 1, "", ""));
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control5TestOK() {
        Control5 c = new Control5();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control5TestFail() {
        Control5 c = new Control5();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control6TestOK() {
        Control6 c = new Control6();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control6TestFail() {
        Control6 c = new Control6();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control7TestOK() {
        Control7 c = new Control7();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control7TestFail() {
        Control7 c = new Control7();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control8TestOK() {
        Control8 c = new Control8();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control8TestFail() {
        Control8 c = new Control8();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control9TestOK() {
        Control9 c = new Control9();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control9TestFail() {
        Control9 c = new Control9();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control10TestOK() {
        Control10 c = new Control10();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control10TestFail() {
        Control10 c = new Control10();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control11TestOK() {
        Control11 c = new Control11();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control11TestFail() {
        Control11 c = new Control11();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control12TestOK() {
        Control12 c = new Control12();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control12TestFail() {
        Control12 c = new Control12();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control13TestOK() {
        Control13 c = new Control13();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control13TestFail() {
        Control13 c = new Control13();
        assertTrue(c.doControl(fail, 2, "", ""));
    }

    @Test
    public void control14TestOK() {
        Control14 c = new Control14();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control14TestFail() {
        Control14 c = new Control14();
        assertTrue(c.doControl(fail, 2, "", ""));
    }
    @Test
    public void control15TestOK() {
        Control15 c = new Control15();
        assertFalse(c.doControl(ok_1, 1, "", ""));
    }

    @Test
    public void control15TestFail() {
        Control15 c = new Control15();
        assertTrue(c.doControl(fail, 2, "", ""));
    }
}
